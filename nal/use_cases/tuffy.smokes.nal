<(*,Anna,Bob) --> Friends>. %1.00;0.99% 
<(*,Anna,Edward) --> Friends>. %1.00;0.99%
<(*,Anna,Frank) --> Friends>. %1.00;0.99%
<(*,Edward,Frank) --> Friends>. %1.00;0.99% 
<(*,Gary,Helen) --> Friends>. %1.00;0.99% 
(--,<(*,Gary,Frank) --> Friends>). %1.00;0.99%
<Anna --> [Smokes]>. %1.00;0.99% 
<Edward --> [Smokes]>. %1.00;0.99%

//only positive side of => corresponds to ==> in NAL, so we have to translate

//!Smokes(a1) || cancer(a1) rewritten:  Smokes(a1) => cancer(a1) or !cancer(a1) => !Smokes(a1)
<<$1 --> [Smokes]> ==> <$1 --> [Cancer]>>. %1.00;0.50%
<(--,<$1 --> [Cancer]>) ==> (--,<$1 --> [Smokes]>)>. %1.00;0.50% 

//!Friends(a1,a2) || !Smokes(a1) || Smokes(a2)
//rewritten:
//Friends(a1,a2) => (!Smokes(a1) || Smokes(a2))  1.
<<(*,$1,$2) --> Friends> ==> (||,<$2 --> [Smokes]>,(--,<$1 --> [Smokes]>))>. %1.00;0.40%
<<(*,$1,$2) --> Friends> ==> (||,<$1 --> [Smokes]>,(--,<$2 --> [Smokes]>))>. %1.00;0.40%
//and contraposition:
//!(!Smokes(a1) || Smokes(a2)) => !Friends(a1,a2) 
//(Smokes(a1) && !Smokes(a2)) => !Friends(a1,a2) 2.
<(&&,<$1 --> [Smokes]>,(--,<$2 --> [Smokes]>)) ==> (--,<(*,$1,$2) --> Friends>)>. %1.00;0.40%
<(&&,<$2 --> [Smokes]>,(--,<$1 --> [Smokes]>)) ==> (--,<(*,$1,$2) --> Friends>)>. %1.00;0.40%
//!Friends(a1,a2) || !Smokes(a2) || Smokes(a1) 
<<(*,$1,$2) --> Friends> ==> (||,<$2 --> [Smokes]>,(--,<$1 --> [Smokes]>))>. %1.00;0.40%
<<(*,$1,$2) --> Friends> ==> (||,<$1 --> [Smokes]>,(--,<$2 --> [Smokes]>))>. %1.00;0.40% 

//!Friends(a1,a2) || !Smokes(a1) || Smokes(a2)
//rewritten2:
//Smokes(a1) => (Smokes(a2) || !Friends(a1,a2))
<<$1 --> [Smokes]> ==> (||,<$2 --> [Smokes]>,(--,<(*,$1,$2) --> Friends>))>. %1.00;0.40% 
<<$2 --> [Smokes]> ==> (||,<$1 --> [Smokes]>,(--,<(*,$1,$2) --> Friends>))>. %1.00;0.40% 
//and contraposition:
//!(Smokes(a2) || !Friends(a1,a2)) => !Smokes(a1)
//(!Smokes(a2) && Friends(a1,a2)) => !Smokes(a1)
<(&&,(--,<$2 --> [Smokes]>),<(*,$1,$2) --> Friends>) ==> (--,<$1 --> [Smokes]>)>. %1.00;0.40% 
<(&&,(--,<$1 --> [Smokes]>),<(*,$1,$2) --> Friends>) ==> (--,<$2 --> [Smokes]>)>. %1.00;0.40% 

//!Friends(a1,a2) || !Smokes(a1) || Smokes(a2)
//rewritten2:
//!Smokes(a2) => (!Friends(a1,a2) || !Smokes(a1))
<(--,<$2 --> [Smokes]>) ==> (||,(--,<(*,$1,$2) --> Friends>),(--,<$1 --> [Smokes]>))>. %1.00;0.40% 
<(--,<$1 --> [Smokes]>) ==> (||,(--,<(*,$1,$2) --> Friends>),(--,<$2 --> [Smokes]>))>. %1.00;0.40% 
//and contraposition:
//!(!Friends(a1,a2) || !Smokes(a1)) => Smokes(a2)
//(Friends(a1,a2) && Smokes(a1)) => Smokes(a2)
<(&&,<(*,$1,$2) --> Friends>,<$1 -->  [Smokes]>) ==> <$2 --> [Smokes]>>.
<(&&,<(*,$1,$2) --> Friends>,<$2 --> [Smokes]>) ==> <$1 --> [Smokes]>>.

<Edward --> [Cancer]>? 
<Anna --> [Cancer]>? 
<Bob --> [Cancer]>? 
<Frank --> [Cancer]>?
<Gary --> [Cancer]>?
<Helen --> [Cancer]>? 

Result:
Solved <Anna --> [Cancer]>. %1.00;0.50%
Solved <Edward --> [Cancer]>. %1.00;0.25%
Solved <Frank --> [Cancer]>. %1.00;0.03%
Solved <Bob --> [Cancer]>. %1.00;0.20%

Which gives:

Anna
Edward
Bob
Frank

Tuffy gives:

Edward
Anna
Bob
Frank

but under AIKR the results may sometimes differ,
the smokes example is not that interesting
for attention-controlled systems.
Especially the predicate logic formulation is quite unnatural.
