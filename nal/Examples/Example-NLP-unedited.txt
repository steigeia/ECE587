***1 [transformation]
  IN: <(*,cat,CAT) --> REPRESENT>. %1.00;0.90% {0 : 1} 
2
 OUT: <cat --> (/,REPRESENT,_,CAT)>. %1.00;0.90% {6 : 1} 
 OUT: <CAT --> (/,REPRESENT,cat,_)>. %1.00;0.90% {6 : 1} 
***2 [transformation]
  IN: <(*,(*,cat,eat,fish),<(*,CAT,FISH) --> FOOD>) --> REPRESENT>. %1.00;0.90% {0 : 1} 
9
 OUT: <(*,cat,eat,fish) --> (/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>)>. %1.00;0.90% {7 : 1} 
 OUT: <<(*,CAT,FISH) --> FOOD> --> (/,REPRESENT,(*,cat,eat,fish),_)>. %1.00;0.90% {7 : 1} 
***3 [transformation]
  IN: <(*,cat,eat,fish) --> (/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>)>. %1.00;0.90% {0 : 1} 
8
 OUT: <cat --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),_,eat,fish)>. %1.00;0.90% {7 : 1} 
 OUT: <eat --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),cat,_,fish)>. %1.00;0.90% {7 : 1} 
 OUT: <fish --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),cat,eat,_)>. %1.00;0.90% {7 : 1} 
 OUT: <(*,(*,cat,eat,fish),<(*,CAT,FISH) --> FOOD>) --> REPRESENT>. %1.00;0.90% {7 : 1} 
 OUT: <<(*,CAT,FISH) --> FOOD> --> (/,REPRESENT,(*,cat,eat,fish),_)>. %1.00;0.90% {7 : 1} 
***4 [induction]
  IN: <cat --> (/,REPRESENT,_,CAT)>. %1.00;0.90% {0 : 1} 
  IN: <cat --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),_,eat,fish)>. %1.00;0.90% {0 : 2} 
2
 OUT: <(*,cat,CAT) --> REPRESENT>. %1.00;0.90% {2 : 1} 
 OUT: <CAT --> (/,REPRESENT,cat,_)>. %1.00;0.90% {2 : 1} 
11
 OUT: <(*,cat,CAT) --> REPRESENT>. %1.00;0.90% {13 : 1} 
 OUT: <CAT --> (/,REPRESENT,cat,_)>. %1.00;0.90% {13 : 1} 
3
 OUT: <CAT --> (/,REPRESENT,cat,_)>. %1.00;0.90% {16 : 1} 
1
 OUT: <(/,(*,cat,CAT),cat,_) --> (/,REPRESENT,cat,_)>. %1.00;0.81% {17 : 1} 
3
 OUT: <(*,cat,eat,fish) --> (/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>)>. %1.00;0.90% {20 : 2} 
 OUT: <eat --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),cat,_,fish)>. %1.00;0.90% {20 : 2} 
 OUT: <fish --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),cat,eat,_)>. %1.00;0.90% {20 : 2} 
6
 OUT: <(*,cat,eat,fish) --> (/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>)>. %1.00;0.90% {26 : 2} 
 OUT: <eat --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),cat,_,fish)>. %1.00;0.90% {26 : 2} 
 OUT: <fish --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),cat,eat,_)>. %1.00;0.90% {26 : 2} 
1
 OUT: <(*,cat,eat,fish) --> (/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>)>. %1.00;0.90% {27 : 2} 
 OUT: <eat --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),cat,_,fish)>. %1.00;0.90% {27 : 2} 
 OUT: <fish --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),cat,eat,_)>. %1.00;0.90% {27 : 2} 
1
 OUT: <CAT --> (/,REPRESENT,cat,_)>. %1.00;0.90% {28 : 1} 
10
 OUT: <(*,cat,CAT) --> REPRESENT>. %1.00;0.90% {38 : 1} 
1
 OUT: <(*,cat,CAT) --> REPRESENT>. %1.00;0.90% {39 : 1} 
10
 OUT: <eat --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),cat,_,fish)>. %1.00;0.90% {49 : 2} 
 OUT: <fish --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),cat,eat,_)>. %1.00;0.90% {49 : 2} 
 OUT: <(*,(*,cat,eat,fish),<(*,CAT,FISH) --> FOOD>) --> REPRESENT>. %1.00;0.90% {49 : 2} 
 OUT: <<(*,CAT,FISH) --> FOOD> --> (/,REPRESENT,(*,cat,eat,fish),_)>. %1.00;0.90% {49 : 2} 
2
 OUT: <(*,cat,CAT) --> (*,cat,(/,REPRESENT,cat,_))>. %1.00;0.81% {51 : 1} 
2
 OUT: <(*,cat,CAT) --> REPRESENT>. %1.00;0.90% {53 : 1} 
 OUT: <CAT --> (/,REPRESENT,cat,_)>. %1.00;0.90% {53 : 1} 
1
 OUT: <(*,cat,CAT) --> (*,(/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),_,eat,fish),CAT)>. %1.00;0.81% {54 : 2} 
1
 OUT: <(*,cat,eat,fish) --> (/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>)>. %1.00;0.90% {55 : 2} 
 OUT: <eat --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),cat,_,fish)>. %1.00;0.90% {55 : 2} 
 OUT: <fish --> (/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),cat,eat,_)>. %1.00;0.90% {55 : 2} 
4
 OUT: <cat --> (|,(/,REPRESENT,_,CAT),(/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),_,eat,fish))>. %1.00;0.81% {59 : 2;1} 
 OUT: <cat --> (&,(/,REPRESENT,_,CAT),(/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),_,eat,fish))>. %1.00;0.81% {59 : 2;1} 
 OUT: <<$1 --> (/,REPRESENT,_,$2)> ==> <$1 --> (/,(/,REPRESENT,_,<(*,$2,FISH) --> FOOD>),_,eat,fish)>>. %1.00;0.45% {59 : 2;1} 
 OUT: <<$1 --> (/,(/,REPRESENT,_,<(*,$2,FISH) --> FOOD>),_,eat,fish)> ==> <$1 --> (/,REPRESENT,_,$2)>>. %1.00;0.45% {59 : 2;1} 
 OUT: <<$1 --> (/,REPRESENT,_,$2)> <=> <$1 --> (/,(/,REPRESENT,_,<(*,$2,FISH) --> FOOD>),_,eat,fish)>>. %1.00;0.45% {59 : 2;1} 
 OUT: (&&,<#1 --> (/,REPRESENT,_,$2)>,<#1 --> (/,(/,REPRESENT,_,<(*,$2,FISH) --> FOOD>),_,eat,fish)>). %1.00;0.81% {59 : 2;1} 
 OUT: <(/,(/,REPRESENT,_,<(*,$1,FISH) --> FOOD>),_,eat,fish) --> (/,REPRESENT,_,$1)>. %1.00;0.45% {59 : 2;1} 
 OUT: <(/,REPRESENT,_,$1) --> (/,(/,REPRESENT,_,<(*,$1,FISH) --> FOOD>),_,eat,fish)>. %1.00;0.45% {59 : 2;1} 
 OUT: <(/,REPRESENT,_,$1) <-> (/,(/,REPRESENT,_,<(*,$1,FISH) --> FOOD>),_,eat,fish)>. %1.00;0.45% {59 : 2;1} 
1
 OUT: <cat --> (/,REPRESENT,_,(/,(*,cat,CAT),cat,_))>. %1.00;0.81% {60 : 1} 
 OUT: <(*,cat,(/,(*,cat,CAT),cat,_)) --> REPRESENT>. %1.00;0.81% {60 : 1} 
4
 OUT: <(*,(/,REPRESENT,_,$1),eat,fish) --> (/,REPRESENT,_,<(*,$1,FISH) --> FOOD>)>. %1.00;0.45% {64 : 2;1} 
 OUT: <eat --> (/,(/,REPRESENT,_,<(*,$1,FISH) --> FOOD>),(/,REPRESENT,_,$1),_,fish)>. %1.00;0.45% {64 : 2;1} 
 OUT: <fish --> (/,(/,REPRESENT,_,<(*,$1,FISH) --> FOOD>),(/,REPRESENT,_,$1),eat,_)>. %1.00;0.45% {64 : 2;1} 
2
 OUT: <<$1 --> (/,REPRESENT,_,$1)> ==> <$2 --> (/,REPRESENT,_,$2)>>. %1.00;0.20% {66 : 2;2;1;1} 
 OUT: <<$1 --> (/,REPRESENT,_,$1)> ==> <$2 --> (/,REPRESENT,_,$2)>>. %1.00;0.17% {66 : 2;2;1;1} 
7
 OUT: <<$1 --> (/,REPRESENT,_,$1)> ==> <$2 --> (/,REPRESENT,_,$2)>>. %1.00;0.20% {73 : 2;2;1;1} 
7
 OUT: <CAT --> (/,REPRESENT,cat,_)>. %1.00;0.90% {80 : 1} 
3
 OUT: <cat --> (|,(/,REPRESENT,_,CAT),(/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),_,eat,fish))>. %1.00;0.81% {83 : 2;1} 
 OUT: <cat --> (&,(/,REPRESENT,_,CAT),(/,(/,REPRESENT,_,<(*,CAT,FISH) --> FOOD>),_,eat,fish))>. %1.00;0.81% {83 : 2;1} 
 OUT: <<$1 --> (/,REPRESENT,_,$2)> ==> <$1 --> (/,(/,REPRESENT,_,<(*,$2,FISH) --> FOOD>),_,eat,fish)>>. %1.00;0.45% {83 : 2;1} 
//note: canceled out because NARS can also not handle the question version:
//***5 [deduction]  - note: reformulation as question because currently this result may not be generated due to combinatoric explosion.
//  IN: <<$1 --> (/,REPRESENT,_,$2)> ==> <$1 --> (/,(/,REPRESENT,_,<(*,$2,FISH) --> FOOD>),_,eat,fish)>>. %1.00;0.90% {0 : 1} 
//  IN: <dog --> (/,REPRESENT,_,DOG)>. %1.00;0.90% {0 : 2} 
//  IN: <dog --> (/,(/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>),_,eat,fish)>?  {0 : 3} 
***6 [transformation]
  IN: <dog --> (/,(/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>),_,eat,fish)>. %1.00;0.90% {0 : 1} 
10
 OUT: <(*,dog,eat,fish) --> (/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>)>. %1.00;0.90% {8 : 1} 
 OUT: <eat --> (/,(/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>),dog,_,fish)>. %1.00;0.90% {8 : 1} 
 OUT: <fish --> (/,(/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>),dog,eat,_)>. %1.00;0.90% {8 : 1} 
***7 [question answering]
  IN: <(*,dog,eat,fish) --> (/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>)>. %1.00;0.90% {0 : 1} 
  IN: <(*,(*,dog,eat,fish),?1) --> REPRESENT>?  {0 : 2} 
11
 OUT: <dog --> (/,(/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>),_,eat,fish)>. %1.00;0.90% {5 : 1} 
 OUT: <eat --> (/,(/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>),dog,_,fish)>. %1.00;0.90% {5 : 1} 
 OUT: <fish --> (/,(/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>),dog,eat,_)>. %1.00;0.90% {5 : 1} 
 OUT: <(*,(*,dog,eat,fish),<(*,DOG,FISH) --> FOOD>) --> REPRESENT>. %1.00;0.90% {5 : 1} 
 OUT: <<(*,DOG,FISH) --> FOOD> --> (/,REPRESENT,(*,dog,eat,fish),_)>. %1.00;0.90% {5 : 1} 
***8 [question answering]
  IN: <(*,dog,eat,fish) --> (/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>)>. %1.00;0.90% {0 : 1} 
  IN: <(*,?1,<(*,DOG,FISH) --> FOOD>) --> REPRESENT>?  {0 : 2} 
4
 OUT: <?1 --> (/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>)>?  {4 : 2} 
 OUT: <<(*,DOG,FISH) --> FOOD> --> (/,REPRESENT,?1,_)>?  {4 : 2} 
4
 OUT: <dog --> (/,(/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>),_,eat,fish)>. %1.00;0.90% {8 : 1} 
 OUT: <eat --> (/,(/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>),dog,_,fish)>. %1.00;0.90% {8 : 1} 
 OUT: <fish --> (/,(/,REPRESENT,_,<(*,DOG,FISH) --> FOOD>),dog,eat,_)>. %1.00;0.90% {8 : 1} 
 OUT: <(*,(*,dog,eat,fish),<(*,DOG,FISH) --> FOOD>) --> REPRESENT>. %1.00;0.90% {8 : 1} 
 OUT: <<(*,DOG,FISH) --> FOOD> --> (/,REPRESENT,(*,dog,eat,fish),_)>. %1.00;0.90% {8 : 1} 
***9 [transformation]
  IN: <<$1 --> (/,REPRESENT,_,$2)> ==> <$1 --> (/,(/,REPRESENT,_,<(*,$2,FISH) --> FOOD>),_,eat,fish)>>. %1.00;0.90% {0 : 1} 
1
 OUT: <<(*,$1,$2) --> REPRESENT> ==> <$1 --> (/,(/,REPRESENT,_,<(*,$2,FISH) --> FOOD>),_,eat,fish)>>. %1.00;0.90% {5 : 1} 
***10 [transformation]
  IN: <<(*,$1,$2) --> REPRESENT> ==> <$1 --> (/,(/,REPRESENT,_,<(*,$2,FISH) --> FOOD>),_,eat,fish)>>. %1.00;0.90% {0 : 1} 
2
 OUT: <<(*,$1,$2) --> REPRESENT> ==> <eat --> (/,(/,REPRESENT,_,<(*,$2,FISH) --> FOOD>),$1,_,fish)>>. %1.00;0.90% {2 : 1} 
4
 OUT: <<(*,$1,$2) --> REPRESENT> ==> <fish --> (/,(/,REPRESENT,_,<(*,$2,FISH) --> FOOD>),$1,eat,_)>>. %1.00;0.90% {6 : 1} 
***11 [induction] - note: reformulation as question because currently this result may not be generated due to combinatoric explosion.
  IN: <<(*,$1,$2) --> REPRESENT> ==> <fish --> (/,(/,REPRESENT,_,<(*,$2,FISH) --> FOOD>),$1,eat,_)>>. %1.00;0.90% {0 : 1} 
  IN: <fish --> (/,REPRESENT,_,FISH)>. %1.00;0.90% {0 : 2} 
  IN: <(&&,<$1 --> (/,REPRESENT,_,$2)>,<(*,$3,$4) --> REPRESENT>) ==> <$1 --> (/,(/,REPRESENT,_,<(*,$4,$2) --> FOOD>),$3,eat,_)>>?  {0 : 3} 
646
 OUT: <(&&,<$1$1 --> (/,REPRESENT,_,$2$2)>,<(*,$3$3,$4$4) --> REPRESENT>) ==> <$1$1 --> (/,(/,REPRESENT,_,<(*,$4$4,$2$2) --> FOOD>),$3$3,eat,_)>>. %1.00;0.45% {646 : 1;1} 
***12 [deduction]
  IN: <(&&,<$1 --> (/,REPRESENT,_,$2)>,<(*,$3,$4) --> REPRESENT>) ==> <$1 --> (/,(/,REPRESENT,_,<(*,$4,$2) --> FOOD>),$3,eat,_)>>. %1.00;0.90% {0 : 1} 
  IN: <dog --> (/,REPRESENT,_,DOG)>. %1.00;0.90% {0 : 2} 
3
 OUT: <(*,dog,DOG) --> REPRESENT>. %1.00;0.90% {3 : 2} 
 OUT: <DOG --> (/,REPRESENT,dog,_)>. %1.00;0.90% {3 : 2} 
1
 OUT: <(&&,<$1 --> (/,REPRESENT,_,$2)>,<(*,$3,$4) --> REPRESENT>) ==> <eat --> (/,(/,REPRESENT,_,<(*,$4,$2) --> FOOD>),$3,_,$1)>>. %1.00;0.90% {4 : 1} 
10
 OUT: <(*,dog,DOG) --> REPRESENT>. %1.00;0.90% {14 : 2} 
 OUT: <DOG --> (/,REPRESENT,dog,_)>. %1.00;0.90% {14 : 2} 
1
 OUT: <(*,dog,DOG) --> (*,(/,REPRESENT,_,DOG),DOG)>. %1.00;0.81% {15 : 2} 
2
 OUT: <(*,dog,DOG) --> (*,(/,REPRESENT,_,DOG),DOG)>. %1.00;0.81% {17 : 2} 
1
 OUT: <DOG --> (/,(*,(/,REPRESENT,_,DOG),DOG),dog,_)>. %1.00;0.81% {18 : 2} 
 OUT: <(\,(*,dog,DOG),(/,REPRESENT,_,DOG),_) --> DOG>. %1.00;0.81% {18 : 2} 
4
 OUT: <(&&,<$1 --> (/,REPRESENT,_,$2)>,<(*,$3,$4) --> REPRESENT>) ==> <eat --> (/,(/,REPRESENT,_,<(*,$4,$2) --> FOOD>),$3,_,$1)>>. %1.00;0.90% {22 : 1} 
10
 OUT: <(&&,<$1 --> (/,REPRESENT,_,$2)>,<(*,$3,$4) --> REPRESENT>) ==> <eat --> (/,(/,REPRESENT,_,<(*,$4,$2) --> FOOD>),$3,_,$1)>>. %1.00;0.90% {32 : 1} 
6
 OUT: <<$1 --> (/,REPRESENT,_,$2)> ==> <eat --> (/,(/,REPRESENT,_,<(*,DOG,$2) --> FOOD>),dog,_,$1)>>. %1.00;0.81% {38 : 1;2}
//note: canceled out because NARS can also not handle the question version:
//***13 [deduction] - note: reformulation as question because currently this result may not be generated due to combinatoric explosion.
//<meat --> (/,REPRESENT,_,MEAT)>.
//<<$1 --> (/,REPRESENT,_,$2)> ==> <eat --> (/,(/,REPRESENT,_,<(*,DOG,$2) --> FOOD>),dog,_,$1)>>.
//<dog --> (/,(/,REPRESENT,_,<(*,DOG,MEAT) --> FOOD>),_,eat,meat)>?
***14 [transformation]
  IN: <dog --> (/,(/,REPRESENT,_,<(*,DOG,MEAT) --> FOOD>),_,eat,meat)>. %1.00;0.90% {0 : 1} 
10
 OUT: <(*,dog,eat,meat) --> (/,REPRESENT,_,<(*,DOG,MEAT) --> FOOD>)>. %1.00;0.90% {8 : 1} 
 OUT: <eat --> (/,(/,REPRESENT,_,<(*,DOG,MEAT) --> FOOD>),dog,_,meat)>. %1.00;0.90% {8 : 1} 
 OUT: <meat --> (/,(/,REPRESENT,_,<(*,DOG,MEAT) --> FOOD>),dog,eat,_)>. %1.00;0.90% {8 : 1} 
***15 [question answering]
  IN: <(*,dog,eat,meat) --> (/,REPRESENT,_,<(*,DOG,MEAT) --> FOOD>)>. %1.00;0.90% {0 : 1} 
  IN: <?1 --> (/,REPRESENT,_,<(*,DOG,MEAT) --> FOOD>)>?  {0 : 2} 
6
 OUT: <(*,dog,eat,meat) --> (/,REPRESENT,_,<(*,DOG,MEAT) --> FOOD>)>. %1.00;0.90% {0 : 1} 
 OUT: <?1 --> (*,dog,eat,meat)>?  {6 : 1;2} 
 OUT: <(*,dog,eat,meat) --> ?1>?  {6 : 1;2} 
 OUT: <?1 <-> (*,dog,eat,meat)>?  {6 : 1;2} 
***16 [question answering]
  IN: <(*,dog,eat,meat) --> (/,REPRESENT,_,<(*,DOG,MEAT) --> FOOD>)>. %1.00;0.90% {0 : 1} 
  IN: <(*,dog,eat,meat) --> (/,REPRESENT,_,?1)>?  {0 : 2} 
11
 OUT: <dog --> (/,(/,REPRESENT,_,<(*,DOG,MEAT) --> FOOD>),_,eat,meat)>. %1.00;0.90% {11 : 1} 
 OUT: <eat --> (/,(/,REPRESENT,_,<(*,DOG,MEAT) --> FOOD>),dog,_,meat)>. %1.00;0.90% {11 : 1} 
 OUT: <meat --> (/,(/,REPRESENT,_,<(*,DOG,MEAT) --> FOOD>),dog,eat,_)>. %1.00;0.90% {11 : 1} 
 OUT: <(*,(*,dog,eat,meat),<(*,DOG,MEAT) --> FOOD>) --> REPRESENT>. %1.00;0.90% {11 : 1} 
 OUT: <<(*,DOG,MEAT) --> FOOD> --> (/,REPRESENT,(*,dog,eat,meat),_)>. %1.00;0.90% {11 : 1} 
